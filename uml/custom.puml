@startuml
'https://plantuml.com/class-diagram

title "カスタム機能の設計図"

class LineTraceCarBuilder {
- brain_: LineTraceBrain*
- front_mid_reflector_: PhotoReflector*
- front_left_reflector_: PhotoReflector*
- front_right_reflector_: PhotoReflector*
- back_mid_reflector_: PhotoReflector*
- back_left_reflector_: PhotoReflector*
- back_right_reflector_: PhotoReflector*
+ SetBrain(brain: LineTraceBrain*)
+ SetFrontMidReflector(reflector: PhotoReflector*)
+ SetFrontLeftReflector(reflector: PhotoReflector*)
+ SetFrontRightReflector(reflector: PhotoReflector*)
+ SetBackMidReflector(reflector: PhotoReflector*)
+ SetBackLeftReflector(reflector: PhotoReflector*)
+ SetBackRightReflector(reflector: PhotoReflector*)
+ GetBrain(): LineTraceBrain*
+ GetFrontMidReflector(): PhotoReflector*
+ GetFrontLeftReflector(): PhotoReflector*
+ GetFrontRightReflector(): PhotoReflector*
+ GetBackMidReflector(): PhotoReflector*
+ GetBackLeftReflector(): PhotoReflector*
+ GetBackRightReflector(): PhotoReflector*
}

class LineTraceCar {
- brain_: LineTraceBrain*
- front_mid_reflector_: PhotoReflector*
- front_left_reflector_: PhotoReflector*
- front_right_reflector_: PhotoReflector*
- back_mid_reflector_: PhotoReflector*
- back_left_reflector_: PhotoReflector*
- back_right_reflector_: PhotoReflector*
- instruction_: Instruction*
+ LineTraceCar(builder: LineTraceCarBuilder*)
- CollectCarState(): LineTraceCarState
}

class LineTraceCarState {
+ left_wheel_speed_: int
+ right_wheel_speed_: int
+ left_wheel_direction_: MoveDirection
+ right_wheel_direction_: MoveDirection
+ front_mid_reflector_color_: BinaryColor
+ front_left_reflector_color_: BinaryColor
+ front_right_reflector_color_: BinaryColor
+ back_mid_reflector_color_: BinaryColor
+ back_left_reflector_color_: BinaryColor
+ back_right_reflector_color_: BinaryColor
+ front_mid_reflector_raw_: int
+ front_left_reflector_raw_: int
+ front_right_reflector_raw_: int
+ back_mid_reflector_raw_: int
+ back_left_reflector_raw_: int
+ back_right_reflector_raw_: int
+ IsAnyBlack(): bool
+ IsAnyWhite(): bool
+ IsAllBlack(): bool
+ IsAllWhite(): bool
+ IsAnyFrontBlack(): bool
+ IsAnyBackBlack(): bool
+ IsAnyFrontWhite(): bool
+ IsAnyBackWhite(): bool
+ IsAllFrontBlack(): bool
+ IsAllBackBlack(): bool
+ IsAllFrontWhite(): bool
+ IsAllBackWhite(): bool
}

abstract class LineTraceBrain {
+ SetCurrentCarState(car_state: LineTraceCarState)
# current_car_state_: LineTraceCarState
# activity_state_: LineTraceActivityState
# Ready(): Instruction*
# Search(): Instruction*
# Trace(): Instruction*
# ReadyBack(): Instruction*
# SearchBack(): Instruction*
# TraceBack(): Instruction*
}

enum LineTraceActivityState {
    ready
    searching
    tracing
    readyBack
    searchingBack
    tracingBack
    finished
}

class LineTraceGoAndBackBrain {
+ LineTraceGoAndBackBrain(base_speed: int, torque_force: int)
- base_speed_: int
- torque_force_: int
}

LineTraceGoAndBackBrain --|> LineTraceBrain
LineTraceCar --|> Car
LineTraceCar ..> LineTraceCarState
LineTraceCar ..> LineTraceBrain
LineTraceCar ..> PhotoReflector
LineTraceCar ..> Instruction
LineTraceBrain ..|> Brain
LineTraceBrain ..> LineTraceActivityState
LineTraceCarBuilder ..> PhotoReflector
LineTraceCarBuilder ..> LineTraceBrain
LineTraceCarBuilder --|> CarBuilder
@enduml